{"version":3,"sources":["components/ProjectCard.js","components/Landing.js","App.js","serviceWorker.js","index.js"],"names":["ProjectCard","className","Component","Landing","props","blink","state","setState","scrollToRef","ref","window","scrollTo","current","offsetTop","changeDefiningText","index","definingText","length","setTimeout","eraseText","holdDuration","text","define","buildText","frameDuration","substring","finalText","renderBlink","renderNav","Col","xs","Row","renderLanding","style","color","cursor","href","class","display","onClick","projectsRef","renderProjects","React","createRef","setInterval","this","nav","landing","App","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e87b49f1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"../css/projects.css\";\nclass ProjectCard extends Component {\n    render() {\n        return <div className='project-card'>Hello</div>;\n    }\n}\n\nexport default ProjectCard;\n","import React, { Component } from 'react';\nimport { Row, Col } from 'react-bootstrap';\n\nimport ProjectCard from './ProjectCard';\n\nimport '../css/landing.css';\nimport '../css/nav.css';\nimport '../css/projects.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nclass Landing extends Component {\n    constructor(props) {\n        super(props);\n        this.definingText = [\n            'Software Developer',\n            'Fullstack Engineer',\n            'Game Designer',\n            'CG Artist',\n        ];\n        this.frameDuration = 15;\n        this.holdDuration = 3000;\n        this.state = {\n            index: 0,\n            define: this.definingText[0],\n            blink: true,\n        };\n\n        this.projectsRef = React.createRef();\n    }\n\n    componentDidMount() {\n        window.setInterval(this.blink, 500);\n        this.changeDefiningText();\n    }\n\n    blink = () => {\n        var blink = this.state.blink;\n        blink = !blink;\n        this.setState({ blink: blink });\n    };\n\n    scrollToRef = (ref) => {\n        window.scrollTo(0, ref.current.offsetTop);\n    };\n\n    changeDefiningText = () => {\n        var index = this.state.index;\n        index++;\n        if (index >= this.definingText.length) {\n            index = 0;\n        }\n        this.setState({ index: index });\n        window.setTimeout(this.eraseText, this.holdDuration);\n    };\n\n    eraseText = () => {\n        var text = this.state.define;\n        if (text.length <= 0) {\n            window.setTimeout(this.buildText(), this.frameDuration);\n        } else {\n            text = text.substring(0, text.length - 1);\n            this.setState({\n                define: text,\n            });\n            window.setTimeout(this.eraseText, this.frameDuration);\n        }\n    };\n\n    buildText = () => {\n        var text = this.state.define;\n        var finalText = this.definingText[this.state.index];\n        if (text.length >= finalText.length) {\n            window.setTimeout(this.changeDefiningText(), this.frameDuration);\n        } else {\n            text = finalText.substring(0, text.length + 1);\n            this.setState({\n                define: text,\n            });\n            window.setTimeout(this.buildText, this.frameDuration);\n        }\n    };\n\n    renderBlink = () => {\n        if (this.state.blink) {\n            return <span>_</span>;\n        } else {\n            return <span>&nbsp;&nbsp;</span>;\n        }\n    };\n\n    renderNav = () => {\n        return (\n            <div className=\"nav\">\n                <Col xs={6}>\n                    <Row className=\"logo\">It's Anish</Row>\n                </Col>\n                {/* <Col>Projects</Col>\n                <Col>Experience</Col>\n                <Col>Contact</Col> */}\n            </div>\n        );\n    };\n\n    renderLanding = () => {\n        const blink = this.renderBlink();\n        return (\n            <div className=\"landing-section\">\n                <Row>\n                    Hey!&nbsp;&nbsp;\n                    <div style={{ color: '#55ff55' }}>I'm Anish</div>\n                </Row>\n                <br />\n                Your Friendly Neighbourhood <br />\n                <b style={{ cursor: 'pointer', color: '#ffff33' }}>\n                    {this.state.define}\n                    {blink}\n                </b>\n                <Row>\n                    <a href=\"https://github.com/aneeshsharma\">\n                        <i class=\"fab fa-github\"></i>\n                    </a>\n                    <a href=\"https://www.linkedin.com/in/anishsharma15/\">\n                        <i class=\"fab fa-linkedin\"></i>\n                    </a>\n                </Row>\n                <div\n                    style={{ display: 'none' }}\n                    className=\"know-more-button\"\n                    onClick={() => {\n                        this.scrollToRef(this.projectsRef);\n                    }}\n                >\n                    Know More<i className=\"fas fa-chevron-down\"></i>\n                </div>\n            </div>\n        );\n    };\n\n    renderProjects = () => {\n        return (\n            <div className=\"projects-section\" ref={this.projectsRef}>\n                <h1>Projects</h1>\n                <div className=\"project-row\">\n                    <ProjectCard />\n                    <ProjectCard />\n                    <ProjectCard />\n                    <ProjectCard />\n                    <ProjectCard />\n                </div>\n            </div>\n        );\n    };\n    render() {\n        let nav = this.renderNav();\n        let landing = this.renderLanding();\n        //let projects = this.renderProjects();\n        return (\n            <div>\n                {nav}\n                {landing}\n            </div>\n        );\n    }\n}\n\nexport default Landing;\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Landing from \"./components/Landing\";\n\nclass App extends Component {\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route path='/'>\n                        <Landing />\n                    </Route>\n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}